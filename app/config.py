# app/config.py - OPTIMIZE EDƒ∞LMƒ∞≈û ve G√úVENLƒ∞ Configuration

import os
from dotenv import load_dotenv

load_dotenv()

class OptimizedSettings:
    """
    ‚úÖ OPTIMIZE EDƒ∞LMƒ∞≈û Trading Bot Ayarlarƒ± v1.2
    - API Rate Limiting optimize edildi
    - G√ºvenli i≈ülem parametreleri  
    - Memory optimize edildi
    - Whipsaw korumasƒ± eklendi
    """
    
    # --- Temel Ayarlar ---
    API_KEY: str = os.getenv("BINANCE_API_KEY")
    API_SECRET: str = os.getenv("BINANCE_API_SECRET")
    ENVIRONMENT: str = os.getenv("ENVIRONMENT", "LIVE")
    BOT_USERNAME: str = os.getenv("BOT_USERNAME", "admin")
    BOT_PASSWORD: str = os.getenv("BOT_PASSWORD", "changeme123")
    BASE_URL = "https://fapi.binance.com" if os.getenv("ENVIRONMENT", "TEST") == "LIVE" else "https://testnet.binancefuture.com"
    WEBSOCKET_URL = "wss://fstream.binance.com" if os.getenv("ENVIRONMENT", "TEST") == "LIVE" else "wss://stream.binancefuture.com"

    # --- OPTIMIZE EDƒ∞LMƒ∞≈û ƒ∞≈ülem Parametreleri ---
    LEVERAGE: int = 10                      # ‚úÖ G√ºvenli 10x kaldƒ±ra√ß
    ORDER_SIZE_USDT: float = 50.0          # ‚úÖ 50 USDT ba≈ülangƒ±√ß boyutu
    TIMEFRAME: str = "15m"                 # ‚úÖ 15m optimal timeframe
    
    # --- G√úVENLI TP/SL Ayarlarƒ± ---
    STOP_LOSS_PERCENT: float = 0.008       # ‚úÖ %0.8 stop loss (g√ºvenli)
    TAKE_PROFIT_PERCENT: float = 0.015     # ‚úÖ %1.5 take profit (optimize)
    
    # --- OPTIMIZE EMA Parametreleri ---
    EMA_FAST_PERIOD: int = 9               # ‚úÖ Hƒ±zlƒ± EMA
    EMA_SLOW_PERIOD: int = 21              # ‚úÖ Yava≈ü EMA
    
    # --- ‚úÖ YENƒ∞: WHIPSAW KORUMA AYARLARI ---
    SIGNAL_COOLDOWN_MINUTES: int = 5       # 5 dakika sinyal soƒüuma
    MIN_EMA_SPREAD_PERCENT: float = 0.001  # Min %0.1 EMA farkƒ±
    CONFIRM_PRICE_ABOVE_EMA: bool = True   # Fiyat EMA √ºzerinde olmalƒ±
    
    # --- ‚úÖ OPTIMIZE EDƒ∞LMƒ∞≈û API RATE LIMITING ---
    API_CALL_DELAY: float = 0.3             # ‚úÖ 300ms g√ºvenli delay
    RATE_LIMIT_BUFFER: float = 0.2          # ‚úÖ 200ms buffer
    MAX_API_CALLS_PER_MINUTE: int = 50      # ‚úÖ Dakika ba≈üƒ±na max 50 istek
    
    # --- ‚úÖ OPTIMIZE Cache ve Performance ---
    CACHE_DURATION_BALANCE: int = 45        # ‚úÖ 45 saniye bakiye cache
    CACHE_DURATION_POSITION: int = 30       # ‚úÖ 30 saniye pozisyon cache
    CACHE_DURATION_PRICE: int = 10          # ‚úÖ 10 saniye fiyat cache
    
    # --- ‚úÖ OPTIMIZE Status Update Intervals ---
    STATUS_UPDATE_INTERVAL: int = 20        # ‚úÖ 20 saniye status update
    BALANCE_UPDATE_INTERVAL: int = 45       # ‚úÖ 45 saniye bakiye update
    POSITION_UPDATE_INTERVAL: int = 30      # ‚úÖ 30 saniye pozisyon update
    
    # --- ‚úÖ OPTIMIZE WebSocket Ayarlarƒ± ---
    WEBSOCKET_PING_INTERVAL: int = 30       # ‚úÖ 30s ping
    WEBSOCKET_PING_TIMEOUT: int = 15        # ‚úÖ 15s timeout
    WEBSOCKET_CLOSE_TIMEOUT: int = 10       # ‚úÖ 10s close timeout
    WEBSOCKET_RECONNECT_DELAY: int = 5      # ‚úÖ 5s reconnect delay
    
    # --- ‚úÖ G√úVENLI Debug Ayarlarƒ± ---
    DEBUG_MODE: bool = True                 # ‚úÖ Debug aktif
    TEST_MODE: bool = False                 # ‚úÖ Canlƒ± i≈ülem (False = LIVE)
    VERBOSE_LOGGING: bool = False           # ‚úÖ Az log (performance i√ßin)
    
    # --- ‚úÖ OPTIMIZE Memory Management ---
    MAX_KLINES_PER_SYMBOL: int = 100        # ‚úÖ 100 mum yeterli EMA i√ßin
    MAX_CACHED_SYMBOLS: int = 20            # ‚úÖ Max 20 symbol cache
    CLEANUP_INTERVAL: int = 300             # ‚úÖ 5 dakikada bir cache cleanup
    
    # --- ‚úÖ G√úVENLI Risk Y√∂netimi ---
    MAX_CONCURRENT_POSITIONS: int = 1       # ‚úÖ Sadece 1 pozisyon
    MAX_DAILY_TRADES: int = 10              # ‚úÖ G√ºnde max 10 i≈ülem
    MIN_BALANCE_USDT: float = 10.0          # ‚úÖ Min 10 USDT bakiye
    MAX_POSITION_SIZE_PERCENT: float = 0.85 # ‚úÖ Bakiyenin max %85'i
    
    # --- ‚úÖ YENƒ∞: SINYAL KALƒ∞TE Fƒ∞LTRELERƒ∞ ---
    ENABLE_QUALITY_FILTERS: bool = True     # Kalite filtreleri aktif
    MIN_VOLUME_MULTIPLIER: float = 1.2      # Min %120 hacim artƒ±≈üƒ±
    MIN_CANDLE_BODY_PERCENT: float = 0.3    # Min %0.3 candle body
    TREND_CONFIRMATION_REQUIRED: bool = True # Trend teyidi gerekli
    
    # --- ‚úÖ OPTIMIZE CONNECTION SETTINGS ---
    CONNECTION_TIMEOUT: int = 30            # 30s connection timeout
    READ_TIMEOUT: int = 60                  # 60s read timeout
    MAX_RETRIES: int = 3                    # Max 3 retry
    BACKOFF_FACTOR: float = 0.5             # Exponential backoff
    
    @classmethod
    def validate_settings_optimized(cls):
        """‚úÖ OPTIMIZE EDƒ∞LMƒ∞≈û ayar doƒürulama"""
        warnings = []
        errors = []
        
        # Kritik ayar kontrolleri
        if not cls.API_KEY or not cls.API_SECRET:
            errors.append("‚ùå KRƒ∞Tƒ∞K: BINANCE_API_KEY veya BINANCE_API_SECRET ayarlanmamƒ±≈ü!")
        
        # G√ºvenlik kontrolleri
        if cls.LEVERAGE < 1 or cls.LEVERAGE > 20:
            warnings.append(f"‚ö†Ô∏è UYARI: Kaldƒ±ra√ß deƒüeri g√ºvenli aralƒ±ƒüƒ±n dƒ±≈üƒ±nda: {cls.LEVERAGE}")
        
        if cls.LEVERAGE > 15:
            warnings.append(f"‚ö†Ô∏è Rƒ∞SK: {cls.LEVERAGE}x kaldƒ±ra√ß y√ºksek risk ta≈üƒ±r!")
        
        # EMA validasyonu
        if cls.EMA_FAST_PERIOD >= cls.EMA_SLOW_PERIOD:
            errors.append(f"‚ùå HATA: Hƒ±zlƒ± EMA yava≈ü EMA'dan k√º√ß√ºk olmalƒ±: {cls.EMA_FAST_PERIOD} >= {cls.EMA_SLOW_PERIOD}")
        
        # TP/SL validasyonu
        if cls.STOP_LOSS_PERCENT > 0.02:  # %2'den fazla
            warnings.append(f"‚ö†Ô∏è UYARI: Stop loss √ßok geni≈ü: %{cls.STOP_LOSS_PERCENT*100:.1f}")
            
        if cls.TAKE_PROFIT_PERCENT < cls.STOP_LOSS_PERCENT:
            warnings.append(f"‚ö†Ô∏è UYARI: Take profit stop loss'dan k√º√ß√ºk!")
            
        # Risk y√∂netimi kontrolleri
        if cls.MAX_POSITION_SIZE_PERCENT > 0.9:
            warnings.append(f"‚ö†Ô∏è Rƒ∞SK: Pozisyon boyutu √ßok y√ºksek: %{cls.MAX_POSITION_SIZE_PERCENT*100}")
            
        # API rate limit kontrolleri
        if cls.API_CALL_DELAY < 0.2:
            warnings.append(f"‚ö†Ô∏è Rƒ∞SK: API delay √ßok d√º≈ü√ºk: {cls.API_CALL_DELAY}s")
            
        if cls.MAX_API_CALLS_PER_MINUTE > 60:
            warnings.append(f"‚ö†Ô∏è Rƒ∞SK: Dakika ba≈üƒ±na √ßok fazla API √ßaƒürƒ±sƒ±: {cls.MAX_API_CALLS_PER_MINUTE}")
        
        # Sonu√ßlarƒ± yazdƒ±r
        for error in errors:
            print(error)
        for warning in warnings:
            print(warning)
        
        if errors:
            print("‚ùå KRƒ∞Tƒ∞K HATALAR VAR! Bot √ßalƒ±≈ümayabilir.")
            return False
        
        if warnings:
            print("‚ö†Ô∏è UYARILAR mevcut, dikkatli kullanƒ±n.")
            
        print("‚úÖ Ayar doƒürulama tamamlandƒ±.")
        return True

    @classmethod
    def print_settings_optimized(cls):
        """‚úÖ OPTIMIZE EDƒ∞LMƒ∞≈û ayar g√∂r√ºnt√ºleme"""
        print("=" * 65)
        print("üéØ OPTIMIZE EDƒ∞LMƒ∞≈û EMA CROSS TRADING BOT v1.2")
        print("=" * 65)
        print(f"üåê Ortam: {cls.ENVIRONMENT}")
        print(f"üß™ Test Modu: {'A√áIK' if cls.TEST_MODE else 'KAPALI (CANLI ƒ∞≈ûLEM)'}")
        print(f"üí∞ ƒ∞≈ülem Miktarƒ±: {cls.ORDER_SIZE_USDT} USDT")
        print(f"üìà Kaldƒ±ra√ß: {cls.LEVERAGE}x")
        print(f"‚è∞ Zaman Dilimi: {cls.TIMEFRAME}")
        print("=" * 65)
        print("üéØ OPTIMIZE EMA STRATEJƒ∞Sƒ∞:")
        print(f"   üìà Hƒ±zlƒ± EMA: {cls.EMA_FAST_PERIOD}")
        print(f"   üìä Yava≈ü EMA: {cls.EMA_SLOW_PERIOD}")
        print(f"   üõ°Ô∏è Sinyal Soƒüuma: {cls.SIGNAL_COOLDOWN_MINUTES} dakika")
        print(f"   üìè Min EMA Farkƒ±: %{cls.MIN_EMA_SPREAD_PERCENT*100}")
        print("=" * 65)
        print("üí∞ G√úVENLI TP/SL AYARLARI:")
        print(f"   üìâ Stop Loss: %{cls.STOP_LOSS_PERCENT*100:.1f}")
        print(f"   üìà Take Profit: %{cls.TAKE_PROFIT_PERCENT*100:.1f}")
        print(f"   üéØ Risk/Reward: 1:{cls.TAKE_PROFIT_PERCENT/cls.STOP_LOSS_PERCENT:.1f}")
        print("=" * 65)
        print("‚ö° OPTIMIZE PERFORMANS AYARLARI:")
        print(f"   üîÑ API Delay: {cls.API_CALL_DELAY}s")
        print(f"   üìä Status Update: {cls.STATUS_UPDATE_INTERVAL}s")
        print(f"   üíæ Bakiye Cache: {cls.CACHE_DURATION_BALANCE}s")
        print(f"   üìà Max Klines: {cls.MAX_KLINES_PER_SYMBOL}")
        print("=" * 65)
        print("‚úÖ YENƒ∞ √ñZELLƒ∞KLER:")
        print("   ‚úÖ NaN safe EMA hesaplamalarƒ±")
        print("   ‚úÖ Dictionary iteration hatasƒ± d√ºzeltildi")
        print("   ‚úÖ Whipsaw korumasƒ± aktif")
        print("   ‚úÖ API rate limiting optimize edildi") 
        print("   ‚úÖ Memory kullanƒ±mƒ± optimize edildi")
        print("   ‚úÖ G√ºvenli pozisyon y√∂netimi")
        print("   ‚úÖ Kaliteli sinyal filtreleme")
        print("=" * 65)
        print("üõ°Ô∏è Rƒ∞SK Y√ñNETƒ∞Mƒ∞:")
        print(f"   üéØ Max Pozisyon: {cls.MAX_CONCURRENT_POSITIONS}")
        print(f"   üìä Max G√ºnl√ºk ƒ∞≈ülem: {cls.MAX_DAILY_TRADES}")
        print(f"   üí∞ Max Pozisyon Boyutu: %{cls.MAX_POSITION_SIZE_PERCENT*100}")
        print(f"   üö® Min Bakiye: {cls.MIN_BALANCE_USDT} USDT")
        print("=" * 65)
        
        # Risk seviyesi belirleme
        risk_score = 0
        if cls.LEVERAGE > 15: risk_score += 2
        if cls.STOP_LOSS_PERCENT > 0.015: risk_score += 1  
        if cls.MAX_POSITION_SIZE_PERCENT > 0.9: risk_score += 1
        
        risk_level = "D√ú≈û√úk" if risk_score == 0 else "ORTA" if risk_score <= 2 else "Y√úKSEK"
        risk_color = "üü¢" if risk_score == 0 else "üü°" if risk_score <= 2 else "üî¥"
        
        print(f"üìä GENEL Rƒ∞SK SEVƒ∞YESƒ∞: {risk_color} {risk_level}")
        print("=" * 65)
        
    @classmethod  
    def get_api_rate_config(cls) -> dict:
        """‚úÖ API rate limiting konfig√ºrasyonu"""
        return {
            "api_call_delay": cls.API_CALL_DELAY,
            "rate_limit_buffer": cls.RATE_LIMIT_BUFFER, 
            "max_calls_per_minute": cls.MAX_API_CALLS_PER_MINUTE,
            "connection_timeout": cls.CONNECTION_TIMEOUT,
            "read_timeout": cls.READ_TIMEOUT,
            "max_retries": cls.MAX_RETRIES,
            "backoff_factor": cls.BACKOFF_FACTOR
        }
        
    @classmethod
    def get_trading_config(cls) -> dict:
        """‚úÖ Trading konfig√ºrasyonu"""
        return {
            "ema_fast": cls.EMA_FAST_PERIOD,
            "ema_slow": cls.EMA_SLOW_PERIOD,
            "timeframe": cls.TIMEFRAME,
            "leverage": cls.LEVERAGE,
            "stop_loss_percent": cls.STOP_LOSS_PERCENT,
            "take_profit_percent": cls.TAKE_PROFIT_PERCENT,
            "signal_cooldown_minutes": cls.SIGNAL_COOLDOWN_MINUTES,
            "min_ema_spread": cls.MIN_EMA_SPREAD_PERCENT,
            "enable_quality_filters": cls.ENABLE_QUALITY_FILTERS
        }

# Optimized settings instance
settings = OptimizedSettings()

# Ba≈ülangƒ±√ßta ayarlarƒ± doƒürula ve g√∂ster
if __name__ == "__main__":
    if settings.validate_settings_optimized():
        settings.print_settings_optimized()
    else:
        print("‚ùå Ayar hatalarƒ±nƒ± d√ºzeltin!")
